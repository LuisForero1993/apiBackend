// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SystemUser {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  role       String    // admin, waiter, kitchen, cashier
  employee   Employee?
  createdAt  DateTime  @default(now())
  orders     Order[]
}

model Employee {
  id           Int         @id @default(autoincrement())
  systemUserId Int         @unique
  position     String      // chef, server, manager
  hireDate     DateTime
  systemUser   SystemUser  @relation(fields: [systemUserId], references: [id])
}

model Customer {
  id    Int     @id @default(autoincrement())
  name  String
  email String?  @unique
  phone String?
  createdAt DateTime  @default(now())
  orders Order[]
}

model Table {
  id        Int      @id @default(autoincrement())
  capacity  Int
  ubication String
  state  Boolean @default(true)
  orders    Order[]
}

// model Kitchen {
//   id        Int      @id @default(autoincrement())
//   name      String
//   location  String?
//   orders    Order[]
// }


model MenuItem {
  id    Int     @id @default(autoincrement())
  name  String
  description String?
  price Float
  category  String    //Entrada, Platofuerte, Bebida, Postre
  available Boolean @default(true)
  OrderDetails  OrderDetail[]
}

model OrderDetail {
  id    Int     @id @default(autoincrement())
  orderId   Int
  menuItemId Int
  quantity Int
  note String?
  order Order @relation(fields: [orderId], references: [id])
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])
}

model Order {
  id          Int      @id @default(autoincrement())
  systemUserId       Int
  tableId     Int
  customerId    Int?
  //kitchenId  Int?
  status    String //Pendiente, En prepraraci√≥n, Entregado, Cancelado
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  orderDetails  OrderDetail[]
  invoice     Invoice?
  systemUser  SystemUser @relation(fields: [systemUserId], references: [id])
  table       Table     @relation(fields: [tableId], references: [id])
  customer    Customer? @relation(fields: [customerId], references: [id])
  //kitchen     Kitchen?  @relation(fields: [kitchenId], references: [id])
}

model Invoice {
  id         Int      @id @default(autoincrement())
  orderId    Int      @unique
  total      Float
  issuedAt   DateTime @default(now())
  paymentMethod String // cash, card, transfer
  order      Order    @relation(fields: [orderId], references: [id])
}
